// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company
// SPDX-License-Identifier: Apache-2.0

package models

// VulnerabilityStatus enumerates the possible values for a manifest's vulnerability status.
type VulnerabilityStatus string

const (
	// ErrorVulnerabilityStatus is a VulnerabilityStatus that indicates that vulnerability scanning failed.
	ErrorVulnerabilityStatus VulnerabilityStatus = "Error"
	// PendingVulnerabilityStatus is a VulnerabilityStatus which means that we're not done scanning vulnerabilities yet.
	PendingVulnerabilityStatus VulnerabilityStatus = "Pending"
	// UnsupportedVulnerabilityStatus is a VulnerabilityStatus which means that we don't support scanning this manifest.
	UnsupportedVulnerabilityStatus VulnerabilityStatus = "Unsupported"
	// CleanSeverity is a VulnerabilityStatus which means that there are no vulnerabilities.
	CleanSeverity VulnerabilityStatus = "Clean"
	// UnknownSeverity is a VulnerabilityStatus which means that there are vulnerabilities, but their severity is unknown.
	UnknownSeverity VulnerabilityStatus = "Unknown"
	// NegligibleSeverity is a VulnerabilityStatus.
	// LowSeverity is a VulnerabilityStatus.
	LowSeverity VulnerabilityStatus = "Low"
	// MediumSeverity is a VulnerabilityStatus.
	MediumSeverity VulnerabilityStatus = "Medium"
	// HighSeverity is a VulnerabilityStatus.
	HighSeverity VulnerabilityStatus = "High"
	// CriticalSeverity is a VulnerabilityStatus.
	CriticalSeverity VulnerabilityStatus = "Critical"
	// RottenVulnerabilityStatus is a VulnerabilityStatus indicating that vulnerability scan results are incomplete because of EOSL on the base distro.
	RottenVulnerabilityStatus VulnerabilityStatus = "Rotten"
)

var sevMap = map[VulnerabilityStatus]uint{
	ErrorVulnerabilityStatus:       0,
	PendingVulnerabilityStatus:     0,
	UnsupportedVulnerabilityStatus: 0,
	CleanSeverity:                  1,
	UnknownSeverity:                2,
	LowSeverity:                    3,
	MediumSeverity:                 4,
	HighSeverity:                   5,
	CriticalSeverity:               6,
	// We consider "Rotten" worse than "Critical" because of the high level of uncertainty associated with incomplete vulnerability scans.
	RottenVulnerabilityStatus: 7,
}

// HasReport checks whether a manifest with this VulnerabilityStatus has a vulnerability report available.
func (s VulnerabilityStatus) HasReport() bool {
	return sevMap[s] > 0
}

// MergeVulnerabilityStatuses combines multiple VulnerabilityStatus values into one.
//
// * Any ErrorVulnerabilityStatus input results in an ErrorVulnerabilityStatus result.
// * Otherwise, any UnsupportedVulnerabilityStatus input results in an UnsupportedVulnerabilityStatus result.
// * Otherwise, any PendingVulnerabilityStatus input results in a PendingVulnerabilityStatus result.
// * Otherwise, the result is the same as the highest individual severity.
func MergeVulnerabilityStatuses(sevs ...VulnerabilityStatus) VulnerabilityStatus {
	hasSpecialSeverity := make(map[VulnerabilityStatus]bool)
	result := CleanSeverity
	for _, s := range sevs {
		if sevMap[s] == 0 {
			hasSpecialSeverity[s] = true
		} else if sevMap[s] > sevMap[result] {
			result = s
		}
	}

	// these special severities can override everything else, in the priority order stated here
	overrides := []VulnerabilityStatus{
		ErrorVulnerabilityStatus,
		UnsupportedVulnerabilityStatus,
		PendingVulnerabilityStatus,
	}
	for _, s := range overrides {
		if hasSpecialSeverity[s] {
			return s
		}
	}

	// otherwise, we take the highest individual severity
	return result
}
